---
title: "Collision_analysis"
output: html_document
---


```{r,echo=FALSE,warning=FALSE,message=FALSE}
# Load libraries
library(rgdal)
library(leaflet)
library(tidyverse)
library(rgeos)
library(raster)
library(ggplot2)
library(sf)
library(mapview)
library(maptools)
library(sp)
library(readxl)
library(readr)
library(grid)
library(gridExtra)

#1.Function for keeping data of Edinburgh with speed limits 20/30/40
filter_data <- function(data){
  data <- data %>% filter(data$Speed_limit %in% c(20,30,40)) 
  data <- data %>% filter(data$`Local_Authority_(District)` == 923)
  #data$Date <- as.Date(data$Date,format="%d/%m/%Y")
  data <- na.omit(data[1:31])#remove NA obs
  return(data)
}

#2.Function for deleting Na points
delete_na <- function(data, desiredCols) {
  completeVec <- complete.cases(data[, desiredCols])
  return(data[completeVec, ])
}

#Data inputs
##1.Data path 
#dir_path <- "C:\\Users\\Kyriaki Kokka\\Desktop\\"
dir_path <- "V:\\Studies\\MOVED\\HealthImpact\\Data\\"

#2.Gis 
#Read geodatabase for Edinburgh
#Path
gdb_path <- paste0(dir_path, "20mph study collisions\\20mph.gdb")
gdb_layers <- ogrListLayers(gdb_path)

```

##Edinburgh's road network

```{r,echo=FALSE,warning=FALSE,message=FALSE} 
#Read shapefile
edin_cons_streets <- readOGR(dsn = gdb_path,layer="Consultation20mphStreets")
#Put ID column as variable 
edin_cons_streets@data <-rowid_to_column(edin_cons_streets@data, "ID")
#Transform to long/lat
edin_cons_streets <- spTransform(edin_cons_streets, "+init=epsg:4326")
#Visualize with leaflet
spplot(edin_cons_streets,'LAYER')
leaflet(edin_cons_streets) %>% addTiles() %>% addPolygons()
```
##Edinburgh's control zones

```{r,echo=FALSE,warning=FALSE,message=FALSE} 
#Read shapefile
edin_impl_zones <- readOGR(dsn = gdb_path, layer="ImplementationZones")
#Transform to long/lat
edin_impl_zones <- spTransform(edin_impl_zones, "+init=epsg:4326")
#Visualize with leaflet
spplot(edin_impl_zones,"ImplementationZone")
leaflet(edin_impl_zones) %>% addTiles() %>% addPolygons()
```


```{r, echo=FALSE, warning=FALSE,message=FALSE}
#3.Read csv files
#Read every year seperately
#Read csv file from 2005 to 2014
rd_source <- read_csv(paste0(dir_path, "20mph study collisions\\collisions\\collisions 2005 to 2014.csv"))  
rd_source$Date <- as.Date(rd_source$Date,format="%d/%m/%Y")

#2013 data
rd_2013 <- rd_source[rd_source$Date >="2013-01-01" & rd_source$Date <= "2013-12-31", ] %>% filter(!is.na(Date))
rd_2013$Date <- as.Date(rd_2013$Date,format="%d/%m/%Y")

#2014 data
rd_2014 <- rd_source[rd_source$Date >="2014-01-01" & rd_source$Date <= "2014-12-31", ] %>% filter(!is.na(Date))
rd_2014b <- read_csv(paste0(dir_path, "20mph study collisions\\collisions\\collisions 2014.csv"))
rd_2014b$Date <- as.Date(rd_2014b$Date,format="%d/%m/%Y")
rd_2014 <- rbind(rd_2014,rd_2014b)
rd_2014$Date <- as.Date(rd_2014$Date,format="%d/%m/%Y")

#2015 data
rd_2015 <- read_csv(paste0(dir_path, "20mph study collisions\\collisions\\collisions 2015.csv"))
rd_2015$Date <- as.Date(rd_2015$Date,format="%d/%m/%Y")

#2018 data
rd_2018 <- read_csv(paste0(dir_path, "20mph study collisions\\collisions\\collisions 2018.csv"))
rd_2018$Date <- as.Date(rd_2018$Date,format="%d/%m/%Y")

#2019 data
#rd_2019 <- read_excel("C:\\Users\\Kyriaki Kokka\\Desktop\\20mph study collisions\\collisions\\collisions 2019 Jan to May Edinburgh only.xls")
#rd_2019 <- rd_2019%>%filter(rd_2019$`Speed Limit`  %in% c(20,30,40)) 

edin_road_data <-rbind(rd_2013,rd_2014,rd_2015,rd_2018) 
edin_road_data <- filter_data(edin_road_data)
edin_road_data <-delete_na(edin_road_data,c("Longitude","Latitude"))
data <- edin_road_data
edin_road_data <-rowid_to_column(edin_road_data, "ID")
df <- data
```

##Time series analysis

>We explore seasonal trends in accidents by day of the year and time of the day:

```{r, echo=FALSE, warning=FALSE,message=FALSE}
library(ggplot2)
library(reshape2)
meltdf <- melt(df, id = c("Date","Speed_limit","Accident_Index"))
ggplot(meltdf, aes(x = Date,y = Accident_Index, colour = Speed_limit, group = Speed_limit))+ geom_line() 


```


```{r, echo=FALSE, warning=FALSE,message=FALSE}

#Functions for the analysis
#Function for the nearest line
nearest_line <-function(df,road_net){
  #Create planar(cartesian) projection 
  crs <- CRS( "+proj=utm +zone=32 +ellps=WGS72 +units=m +no_defs")     # UTM zone = 32 N
  wgs84 <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")  # long/lat
  
  #Convert data to planar projection  
  road_net <- spTransform(road_net,crs)
  df <-  spTransform(SpatialPointsDataFrame(coords = df[5:6],proj4string = wgs84,data = df), crs)
  
  #Make sure our data have same projections
  proj4string(df) <- proj4string(road_net)
  
  #Find nearest line with maxDist=20m 
  nearest_line_sp <- snapPointsToLines(df,road_net,maxDist=10)
  
  return(nearest_line_sp)
}

#Function for leaflet visualisations
leaflet_map <- function(final_df,road_df,edin_streets){
  crs <- CRS( "+proj=utm +zone=32 +ellps=WGS72 +units=m +no_defs")     # UTM zone = 32 N
  wgs84 <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")  # long/lat
  
  #Convert data to planar projection  
  edin_streets <- spTransform(edin_streets,crs)
  coordinates(road_df) <- ~ Longitude + Latitude
  coordinates(final_df) <- ~ X + Y
  
  #Convert data projections back to lat/long to plot with leaflet
  edin_streets <- spTransform(edin_streets,"+init=epsg:4326")
  
  #Same projections
  proj4string(final_df) <- proj4string(edin_streets)
  proj4string(road_df) <- proj4string(edin_streets)
  
  edin_streets <- st_as_sf(edin_streets)
  #Leaflet maps of the road network , accidents and their projections
  road_existing_20 <-edin_streets%>% filter(edin_streets$LAYER == "20mph existing streets")
  road_local_20 <- filter(edin_streets, edin_streets$LAYER == "20mph local streets")
  road_main_20 <- filter(edin_streets, edin_streets$LAYER == "20mph main streets")
  road_30 <- filter(edin_streets, edin_streets$LAYER == "30mph")
  road_40 <- filter(edin_streets, edin_streets$LAYER == "40mph")
  road_part <- filter(edin_streets, edin_streets$LAYER == "Part time 20mph")
  road_50 <- filter(edin_streets, edin_streets$LAYER == "50, 60 or 70mph")
  road_trunk <- filter(edin_streets, edin_streets$LAYER == "Trunk roads")
  
  
  #Visualize
  map <- leaflet() %>% addTiles() %>% addPolygons(data = edin_streets)
  map_near <-map %>% leaflet() %>% addTiles() %>% addMarkers(lng =final_df$X, lat = final_df$Y,
                                                             popup =paste("Accident index: ", final_df$Accident_Index, "<br>",
                                                                          "Speed limit: ", final_df$Speed_limit ,"<br>",
                                                                          "Layer: ",final_df$LAYER,"<br>",
                                                                          "Accident severity: ",final_df$Accident_Severity))
  road_df <- (data.frame(road_df))
  map3 <- map_near %>% addCircleMarkers(lng =road_df$Longitude , lat = road_df$Latitude,
                                        popup =paste("Accident index: ", road_df$Accident_Index, "<br>",
                                                     "Speed limit: ", road_df$Speed_limit ,"<br>",
                                                     "Accident severity: ",road_df$Accident_Severity ))
  
  
  map3 %>% 
    addPolylines(data = road_existing_20, color= "green")%>%
    addPolylines(data = road_local_20,color= "red")%>%
    addPolylines(data = road_main_20,color= "yellow")%>%
    addPolylines(data = road_30,color= "cyan")%>%
    addPolylines(data = road_40,color= "blue")%>%
    addPolylines(data = road_part,color= "black")%>%
    addPolylines(data = road_50,color= "purple")%>%
    addPolylines(data = road_trunk,color= "orange")
}
```


```{r, echo=FALSE, warning=FALSE,message=FALSE}
#pre 20mph (bind 2013-2015)
pre_20 <- edin_road_data[edin_road_data$Date >="2013-01-01" & edin_road_data$Date <= "2015-12-31", ] %>% filter(!is.na(Date))

#post 20mph (2018)
post_20 <-  edin_road_data[edin_road_data$Date >="2018-01-01" & edin_road_data$Date <= "2018-12-31", ] %>% filter(!is.na(Date))

#Data manipulation
#Get nearest line for pre and post 20mph using the nearest_line function 
nearest_pre <- nearest_line(pre_20,edin_cons_streets)
nearest_pre <- spTransform(nearest_pre,"+init=epsg:4326")
```


```{r, echo=FALSE, warning=FALSE,message=FALSE}
nearest_post <- nearest_line(post_20,edin_cons_streets)
nearest_post <- spTransform(nearest_post,"+init=epsg:4326")
```


```{r, echo=FALSE, warning=FALSE,message=FALSE}
#Merge the dataframes based on the ID of the nearest line in order to connect geoinformation with stasts19 
merged_pre <- merge(data.frame(nearest_pre),edin_cons_streets@data,by.x = "nearest_line_id" ,by.y = "ID")
merged_post <- merge(data.frame(nearest_post),edin_cons_streets@data,by.x = "nearest_line_id" ,by.y = "ID")
```

#Mapping accidents with roads

> We have the road network of Edinburgh with the points (blue circles) and the projected points to the nearest road. There are popups for both of the points available. The road network is explained as follows:
Type of road        | Colour
--------------------| -------------
20mph existing roads| green
20 local roads      | red 
20 main roads       | yellow
30mph               | cyan 
40mph               | blue
50,60,70mph         | black 
Part time 20mph     | purple
Trunk roads         | orange

```{r, echo=FALSE, warning=FALSE,message=FALSE}

leaflet_map(merged_pre[merged_pre$Date >="2013-01-01" & merged_pre$Date <= "2013-12-31", ],edin_road_data[edin_road_data$Date >="2013-01-01" & edin_road_data$Date <= "2013-12-31", ],edin_cons_streets)
```
###2013


```{r, echo=FALSE, warning=FALSE,message=FALSE}
leaflet_map(merged_post,edin_road_data[edin_road_data$Date >="2018-01-01" & edin_road_data$Date <= "2018-12-31", ],edin_cons_streets)

```

##Output: column for layer
```{r,echo=FALSE,warning=FALSE,message=FALSE}
head(merged_pre[,c(3,20,39)])
```

##Count tables per year
###2013
```{r,echo=FALSE,warning=FALSE,message=FALSE}
#Count function
count <- function(data_df){
  count1 <- aggregate(Accident_Index~LAYER,data_df,length)
  count2 <- aggregate(Accident_Index~Speed_limit,data_df,length)
  print(count1)
  print(count2)
}

count(merged_pre[merged_pre$Date >="2013-01-01" & merged_pre$Date <= "2015-12-31", ])
```
###2014

```{r,echo=FALSE,warning=FALSE,message=FALSE}
count(merged_pre[merged_pre$Date >="2014-01-01" & merged_pre$Date <= "2014-12-31", ])

```
###2015

```{r,echo=FALSE,warning=FALSE,message=FALSE}
count(merged_pre[merged_pre$Date >="2015-01-01" & merged_pre$Date <= "2015-12-31", ])
```

###2018
```{r,echo=FALSE,warning=FALSE,message=FALSE}
count(merged_post[merged_post$Date >="2018-01-01" & merged_post$Date <= "2018-12-31", ])
#count(merged_pre[merged_pre$Date >="2013-01-01" & merged_pre$Date <= "2013-12-31", ])

```

##Mapping zones with accidents

```{r,echo=FALSE,warning=FALSE,message=FALSE}

edin_impl_zones <- readOGR(dsn = gdb_path, layer="ImplementationZones")

#Create planar(cartesian) projection 
crs <- CRS( "+proj=utm +zone=32 +ellps=WGS72 +units=m +no_defs")     # UTM zone = 32 N
wgs84 <- CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")  # long/lat

#Convert data to planar projection  
edin_impl_zones <- spTransform(edin_impl_zones,crs)
utm_data <-  spTransform(SpatialPointsDataFrame(coords = data[4:5],proj4string = wgs84,data = data), crs)

proj4string(utm_data) <- proj4string(edin_impl_zones)

#add a buffer around the point
points_polygons <- gBuffer(utm_data, width=5, byid = TRUE )
count_zones <- over(points_polygons,edin_impl_zones,returnList = FALSE)
count_zones <- rowid_to_column(count_zones,"ID")
data <- rowid_to_column(data,"index_ID")
total_zones <- merge(data,count_zones,by.x="index_ID",by.y="ID")
df_zones <-data.frame(total_zones[2],total_zones[19],total_zones[35])

#Convert data projections back to lat/long to plot with leaflet
edin_impl_zones <- spTransform(edin_impl_zones,"+init=epsg:4326")
#total_zones <- spTransform(total_zones, "+init=epsg:4326")
utm_data <- spTransform(utm_data, "+init=epsg:4326")


df_na <- na.omit(df_zones[1:4]) # check how many are missing
```

#Zones visualisation per year

```{r,echo=FALSE,warning=FALSE,message=FALSE}

edin_impl_zones <- st_as_sf(edin_impl_zones)
#Leaflet maps of the zones & accidents
zone_1 <- filter(edin_impl_zones,edin_impl_zones$ImplementationZone == 1)
zone_2 <- filter(edin_impl_zones,edin_impl_zones$ImplementationZone == 2)
zone_3 <- filter(edin_impl_zones,edin_impl_zones$ImplementationZone == 3)
zone_4 <- filter(edin_impl_zones,edin_impl_zones$ImplementationZone == 4)
zone_5 <- filter(edin_impl_zones,edin_impl_zones$ImplementationZone == 5)
zone_6 <- filter(edin_impl_zones,edin_impl_zones$ImplementationZone == 6)

#Visualize
map_zones <- leaflet() %>% addTiles() %>% 
  addPolygons(data = zone_1, color= "green")%>%
  addPolygons(data = zone_2,color= "red")%>%
  addPolygons(data = zone_3,color= "purple")%>%
  addPolygons(data = zone_4,color= "cyan")%>%
  addPolygons(data = zone_5,color= "blue")%>%
  addPolygons(data = zone_6,color= "orange")

map_zones %>% addMarkers(lng =df_zones$Longitude, lat = df_zones$Latitude, 
                         popup =paste("Accident index: ", df_zones$Accident_Index, "<br>",
                                      "Zone: ", df_zones$ImplementationZone))
```
##Output: Zone column 

```{r,echo=FALSE,warning=FALSE,message=FALSE}
head(df_zones)
```

